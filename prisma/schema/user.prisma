// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "driverAdapters", "prismaSchemaFolder", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String           @id @default(cuid())
  facebook_id               String?
  google_id                 String?
  email                     String           @unique
  password                  String?
  firstName                 String
  lastName                  String
  fullName                  String
  dateOfBirth               DateTime?
  salutation                String?
  username                  String?
  emailVerified             Boolean          @default(false)
  status                    String           @default("active")
  failedLoginAttempts       Int              @default(0)
  accountLocked             Boolean          @default(false)
  lockedUntil               DateTime?
  resetPasswordToken        String?
  resetPasswordTokenExpires DateTime?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  customerProfile           CustomerProfile?
  SessionToken              SessionToken?
  UserPreference            UserPreference?
  PhoneNumber               PhoneNumber[]
}

model CustomerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profileImageUrl String?
  bio             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SessionToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme          String   @default("light")
  language       String   @default("en")
  sendNewsLetter Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PhoneNumber {
  id            String           @id @default(cuid())
  userId        String
  number        String
  countryCode   PhoneCountryCode @relation(fields: [countryCodeId], references: [id])
  countryCodeId Int
  isPrimary     Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhoneCountryCode {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  PhoneNumber PhoneNumber[]
}
